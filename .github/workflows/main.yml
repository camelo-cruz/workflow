name: Automatic Workflow Distribution

on:
  push:
    paths:
      - "source/**/*.py"

jobs:
  cleanup:
    runs-on: ubuntu-latest
    
    steps:
    
    - name: Check Out Repository
      uses: actions/checkout@v3

    - name: Install GitHub CLI
      run: |
        sudo apt-get install -y gh
      
    - name: Delete old workflow runs
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Fetch the workflow runs
        WORKFLOW_ID=$(gh workflow list --json name,id -q '.[] | select(.name=="Automatic Workflow Distribution") | .id')
        echo "Workflow ID: ${WORKFLOW_ID}"
        if [ -z "${WORKFLOW_ID}" ]; then
          echo "Error: Unable to find workflow ID." >&2
          exit 1
        fi
        # Delete workflow runs older than the latest one
        gh run list --workflow $WORKFLOW_ID --json databaseId -q '.[1:] | .[].databaseId' | while read -r RUN_ID; do
          echo "Deleting run ID: $RUN_ID"
          echo "y" | gh run delete "$RUN_ID"
        done
          
  windows-distribution:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with: 
        python-version: 3.12.3

    - name: Install rclone on Windows
      shell: powershell
      run: |
        Invoke-WebRequest -Uri https://downloads.rclone.org/rclone-current-windows-amd64.zip -OutFile rclone.zip
        Expand-Archive rclone.zip -DestinationPath $env:RUNNER_TEMP\rclone
        Move-Item $env:RUNNER_TEMP\rclone\rclone-*-windows-amd64\rclone.exe C:\Windows\System32\rclone.exe

    - name: Verify rclone installation
      shell: powershell
      run: |
        rclone --version

    - name: Test rclone Configuration (Upload Timestamp File)
      shell: powershell
      run: |
        $configPath = "$env:RUNNER_TEMP\rclone.conf"

        # Construct the rclone.conf file properly
        $rcloneConfig = @"
        [onedrive]
        type = onedrive
        token = ${{ secrets.RCLONE_TOKEN }}
        drive_id = b!IPOlV9HSH0anUWz9W8xB2fOguCxVpa1IicAMMuGZ4o4IPemncERZR75HcPvAst-a
        drive_type = business
        "@

        # Write the config to file
        $rcloneConfig | Out-File -Encoding utf8 $configPath

        if (!(Test-Path $configPath)) {
          echo "‚ùå Failed to create rclone config file."
          exit 1
        }

        # Display rclone.conf for debugging (remove in production)
        echo "üìÑ Rclone Config Contents:"
        Get-Content $configPath

        # Create a test file with the current date
        $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        $dateFile = "$env:RUNNER_TEMP\rclone_test.txt"
        echo "Date and time of build - Build Time: $timestamp" | Out-File -Encoding utf8 $dateFile

        if (!(Test-Path $dateFile)) {
          echo "‚ùå Failed to create test timestamp file."
          exit 1
        }

        # Try uploading the test file
        rclone --config $configPath copy $dateFile onedrive:/TGT_app --progress

        # Check if upload was successful
        if ($?) {
          echo "‚úÖ Rclone test upload succeeded."
        } else {
          echo "‚ùå Rclone test upload failed. Stopping workflow."
          exit 1
        }

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -U pyinstaller
        
    - name: Remove temp and Build binary with PyInstaller
      shell: bash
      run: |
        cd source
        pyinstaller --clean --onefile \
          --add-data ../materials/*:materials \
          --add-data ../whisper/assets/*:whisper/assets \
          --specpath windows-distribution/ \
          --distpath windows-distribution/dist \
          --workpath windows-distribution/build \
          --collect-submodules=numba \
          --name tgt_windows main.py

    - name: Upload binary as artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-artifact
        path: source/windows-distribution/dist

    - name: Upload built app to OneDrive
      shell: powershell
      run: |
        $configPath = "$env:RUNNER_TEMP\rclone.conf"

        # Ensure rclone.conf exists before upload
        if (!(Test-Path $configPath)) {
          echo "‚ùå rclone.conf file missing before final upload."
          exit 1
        }

        # Ensure the built binary exists before uploading
        $binaryPath = "source/windows-distribution/dist/tgt_windows.exe"
        if (!(Test-Path $binaryPath)) {
          echo "‚ùå Binary missing before upload. Exiting."
          exit 1
        }

        # Upload the built binary to OneDrive
        rclone --config $configPath copy source/windows-distribution/dist onedrive:/TGT_app --progress

        if ($?) {
          echo "‚úÖ Successfully uploaded the built app to OneDrive."
        } else {
          echo "‚ùå Upload failed. Please check rclone logs."
          exit 1
        }
